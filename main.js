// Generated by CoffeeScript 1.7.1
var BubbleGraph, Caption, Histogram, Timeline, dimension_window, getParams, height, params, pin, svg, width, _ref,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Timeline = (function() {
  function Timeline(data, domains, bin_spacing, bin_width) {
    var first_data, last_data, _ref;
    if (bin_spacing == null) {
      bin_spacing = 50;
    }
    if (bin_width == null) {
      bin_width = 10;
    }
    this.bin_spacing = bin_spacing;
    this.bin_width = bin_width;
    this.domains = domains;
    this.dom = null;
    this.timeAxis_padding = 20;
    this.data = data;
    this.data_keys = this.data.keys().sort(d3.ascending);
    _ref = this.data_keys, first_data = _ref[0], last_data = _ref[_ref.length - 1];
    this.first_week = new Date(first_data);
    this.last_week = new Date(last_data);
    this.time = d3.time.scale().domain([this.first_week, this.last_week]).range([0, this.bin_spacing * this.data_keys.length]);
    this.y = d3.scale.linear().domain([
      0, d3.max(this.data.values(), function(d) {
        return d.number_of_interactions;
      })
    ]).range([this.domains[1][0] - this.timeAxis_padding, this.domains[1][1]]);
    this.timeAxis = d3.svg.axis().scale(this.time).orient("bottom").ticks(d3.time.weeks).tickFormat(d3.time.format("%a %d"));
  }

  Timeline.prototype.render = function(svg, id) {
    if (id == null) {
      id = '#timeline';
    }
    this.dom = svg.append("g").attr("id", id).attr("class", "timeline");
    this.dom.append("g").attr("class", "time axis").attr("transform", "translate(0," + (this.domains[1][0] - this.timeAxis_padding) + ")").call(this.timeAxis);
    this.bar = this.dom.selectAll(".bar").data(this.data.entries()).enter().append("g").attr("class", "bar").attr("transform", (function(_this) {
      return function(d) {
        return "translate(" + _this.time(new Date(d.key)) + "," + _this.y(d.value.number_of_interactions) + ")";
      };
    })(this));
    return this.bar.append("rect").attr("x", -this.bin_width / 2).attr("width", this.bin_width).attr("height", (function(_this) {
      return function(d) {
        return _this.domains[1][0] - _this.timeAxis_padding - _this.y(d.value.number_of_interactions);
      };
    })(this));
  };

  Timeline.prototype.selectWeek = function(id, duration) {
    var datum, key;
    if (duration == null) {
      duration = 200;
    }
    key = this.data_keys[id];
    datum = new Date(key);
    this.dom.selectAll('.bar').attr("class", function(d) {
      if (key === d.key) {
        return "bar selected";
      } else {
        return "bar";
      }
    });
    return this.dom.transition().ease("sin").duration(duration).attr("transform", "translate(" + (width / 2 - this.time(datum)) + ", 0)");
  };

  return Timeline;

})();

BubbleGraph = (function() {
  function BubbleGraph(events, domains, selected_week_id) {
    this.tick = __bind(this.tick, this);
    this.domains = domains;
    this.width = this.domains[0][1] - this.domains[0][0];
    this.height = this.domains[1][1] - this.domains[1][0];
    this.events = events;
    this.events_keys = this.events.keys();
    this.selected_week_id = selected_week_id;
    this.selected_week_key = this.events_keys[selected_week_id];
    this.ego = d3.map(this.events.get(this.selected_week_key).events).entries();
    this.bubble = d3.layout.pack().sort(null).padding(50).radius(function(d) {
      return d;
    }).size([500, 500]);
    this.bubbleNodes = this.bubble.nodes({
      children: this.ego
    });
    this.force = d3.layout.force().nodes(this.bubbleNodes.filter(function(d) {
      return !d.children;
    })).size([500, 500]).on("tick", this.tick);
  }

  BubbleGraph.prototype.render = function(svg, fill, id) {
    if (id == null) {
      id = '#bubble';
    }
    this.dom = svg.append("g").attr("id", id).attr("class", "timeline");
    this.egoChart = this.dom.selectAll(".ego").data(this.bubbleNodes).enter().append("g").attr("class", "ego").attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    this.egoCircles = this.egoChart.append("circle").attr("opacity", 0.4).style("fill", function(d) {
      return d.key && fill(d.key) || "none";
    });
    this.egoTitles = this.egoChart.append("text").attr("text-anchor", "left").attr("dy", ".3em").attr("dx", ".8em");
    return this.selectWeek(this.selected_week_id);
  };

  BubbleGraph.prototype.tick = function() {
    return this.egoChart.data(this.bubbleNodes).attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
  };

  BubbleGraph.prototype.selectWeek = function(selected_week_id) {
    var weekly_events;
    this.selected_week_id = selected_week_id;
    this.selected_week_key = this.events_keys[this.selected_week_id];
    weekly_events = this.events.get(this.selected_week_key).events;
    this.force.nodes().forEach(function(d) {
      d.value = weekly_events[d.key];
      return d.r = d.value;
    });
    this.force.charge(function(d) {
      return -d.r * 50;
    }).start();
    this.egoCircles.transition().duration(200).attr("r", function(d) {
      return d.r * 5;
    });
    return this.egoTitles.transition().duration(200).attr("opacity", function(d) {
      if (d.key && d.r > 0) {
        return 1;
      } else {
        return 0;
      }
    }).text(function(d) {
      if (d.key && d.r > 0) {
        return d.key.substring(0, 10);
      }
    });
  };

  return BubbleGraph;

})();

Histogram = (function() {
  function Histogram(data, domains) {
    this.domains = domains;
    this.width = this.domains[0][1] - this.domains[0][0];
    this.height = this.domains[1][1] - this.domains[1][0];
    this.x = d3.scale.linear().domain(data).range(this.domains[0]);
    this.data = d3.layout.histogram().bins(10)(data);
    this.y = d3.scale.linear().domain(d3.extent(this.data, function(d) {
      return d.y;
    })).range([d3.max(domains[1]), d3.min(domains[1])]);
    this.xAxis = d3.svg.axis().scale(this.x).ticks(3, ",.1s").orient("bottom");
    this.points = null;
  }

  Histogram.prototype.update = function(data) {
    this.x.domain(d3.extent(data));
    this.data = d3.layout.histogram().bins(10)(data);
    this.y.domain(d3.extent(this.data, function(d) {
      return d.y;
    }));
    this.path.datum(this.data).attr("d", this.line);
    this.points.data(this.data).attr("cx", (function(_this) {
      return function(d) {
        return _this.x(d.x);
      };
    })(this)).attr("cy", (function(_this) {
      return function(d) {
        return _this.y(d.y);
      };
    })(this));
    return this.axis.call(this.xAxis);
  };

  Histogram.prototype.render = function(svg, title, id) {
    var repeat;
    if (title == null) {
      title = 'Truc';
    }
    if (id == null) {
      id = 'histogram';
    }
    this.dom = svg.append("g").attr("class", "histogram").attr("id", id);
    this.dom.append("text").attr("class", "title").attr("transform", "translate(" + this.domains[0][0] + ", " + this.domains[1][0] + ")").text(title);
    this.line = d3.svg.line().interpolate("basis").x((function(_this) {
      return function(d) {
        return _this.x(d.x);
      };
    })(this)).y((function(_this) {
      return function(d) {
        return _this.y(d.y);
      };
    })(this));
    this.path = this.dom.append("path").datum(this.data).attr("class", "line").attr("d", this.line);
    this.points = this.dom.selectAll(".point").data(this.data).enter().append("circle").attr("class", "dot").attr("cx", (function(_this) {
      return function(d) {
        return _this.x(d.x);
      };
    })(this)).attr("cy", (function(_this) {
      return function(d) {
        return _this.y(d.y);
      };
    })(this)).attr("r", 3);
    this.axis = this.dom.append("g").attr("class", "axis").attr("transform", "translate(0, " + this.domains[1][1] + ")").call(this.xAxis);
    repeat = (function(_this) {
      return function() {
        return _this.points.transition().duration(500).style("opacity", function(d) {
          return Math.random() * 0.8 + 0.2;
        }).each("end", repeat);
      };
    })(this);
    return repeat();
  };

  return Histogram;

})();

Caption = (function() {
  function Caption(label_msg, text_msg, domains) {
    this.label_msg = label_msg;
    this.text_msg = text_msg;
    this.domains = domains;
  }

  Caption.prototype.render = function(svg, id) {
    if (id == null) {
      id = 'caption';
    }
    this.dom = svg.append("g").attr('id', id).attr('class', 'caption').attr("transform", "translate(" + this.domains[0][0] + ", " + this.domains[1][0] + ")");
    this.label = this.dom.append("text").text(this.label_msg).attr("class", "title");
    return this.text = this.dom.append("text").text(this.text_msg).attr("class", "text").attr("transform", "translate(0, 20)");
  };

  Caption.prototype.update = function(text_msg) {
    this.text_msg = text_msg;
    return this.text.text(this.text_msg);
  };

  return Caption;

})();

dimension_window = function() {
  var d, e, g, w, x, y;
  w = window;
  d = document;
  e = d.documentElement;
  g = d.getElementsByTagName('body')[0];
  x = w.innerWidth || e.clientWidth || g.clientWidth;
  y = w.innerHeight || e.clientHeight || g.clientHeight;
  return [x, y];
};

_ref = dimension_window(), width = _ref[0], height = _ref[1];

width = width * 0.7;

svg = d3.select("body").append("svg").attr("width", width).attr("height", height);

getParams = function() {
  var key, params, query, raw_vars, v, val, _i, _len, _ref1;
  query = window.location.search.substring(1);
  raw_vars = query.split("&");
  params = {};
  for (_i = 0, _len = raw_vars.length; _i < _len; _i++) {
    v = raw_vars[_i];
    _ref1 = v.split("="), key = _ref1[0], val = _ref1[1];
    params[key] = decodeURIComponent(val);
  }
  return params;
};

params = getParams();

pin = params['pin'];

d3.json("http://socialmetadata.linkedpersonaldata.org/bandicoot/pin/" + pin + "/", function(events) {
  var caption_entropy, ego_graph, events_keys, fill, me, nb_interactions, percent_initiated, selected_week, selected_week_id, timeline, week_caption, week_format, weekly;
  events = d3.map(events);
  events_keys = events.keys().sort(d3.ascending);
  me = "37349f07c95879abf625e8e7ae56170c";
  timeline = new Timeline(events, [[0, width], [height, height - 100]]);
  timeline.render(svg);
  selected_week_id = Math.floor(events_keys.length / 2);
  selected_week = events_keys[selected_week_id];
  timeline.selectWeek(selected_week_id);
  fill = d3.scale.category20c();
  ego_graph = new BubbleGraph(events, [[50, 550], [50, 550]], selected_week_id);
  ego_graph.render(svg, fill);
  weekly = events.get(selected_week);
  caption_entropy = new Caption("Entropy", weekly.entropy, [[700, 900], [250, 300]]);
  caption_entropy.render(svg);
  nb_interactions = new Caption("Number of interactions", weekly.number_of_interactions, [[700, 900], [300, 350]]);
  nb_interactions.render(svg);
  percent_initiated = new Caption("% initiated", d3.format("%")(weekly.percent_initiated), [[700, 900], [350, 400]]);
  percent_initiated.render(svg);
  week_format = function(w) {
    return d3.time.format("%a. %d (%b. %Y)")(d3.time.monday(w));
  };
  week_caption = new Caption("week", week_format(new Date(selected_week)), [[700, 900], [50, 100]]);
  week_caption.render(svg);
  return d3.select('body').on("keydown", function() {
    var key;
    key = d3.event.keyCode;
    if (key === 37 && selected_week_id > 0) {
      selected_week_id -= 1;
    } else if (key === 39 && selected_week_id < events_keys.length - 1) {
      selected_week_id += 1;
    }
    selected_week = events_keys[selected_week_id];
    timeline.selectWeek(selected_week_id);
    ego_graph.selectWeek(selected_week_id);
    weekly = events.get(selected_week);
    caption_entropy.update(weekly.entropy);
    nb_interactions.update(weekly.number_of_interactions);
    week_caption.update(week_format(new Date(selected_week)));
    return percent_initiated.update(d3.format("%")(weekly.percent_initiated));
  });
});

//# sourceMappingURL=main.map
